
# example docker-compose file for anchore-engine - to use:
#
# Pre-requisites
# - recommend that anchore-cli is installed
# 
# Set up persistent volume for anchore-engine (do this once)
# - create a directory /root/aevolume
# - create a directory /root/aevolume/db
# - create a directory /root/aevolume/config
# - copy the example (./scripts/docker-compose/config.yaml) to /root/aevolume/config/config.yaml
# - edit /root/aevolume/config/config.yaml and save (only if you need to make changes - not required)
# - review ./docker-compose.yaml
#
# Run, use, stop, restart the anchore-engine with docker-compose
# - run: docker-compose up -d
#
# - interact with anchore-engine with anchore-cli:
#   - export ANCHORE_CLI_URL=http://localhost:8228/v1
#   - export ANCHORE_CLI_USER=admin
#   - export ANCHORE_CLI_PASS=foobar
#   - export ANCHORE_CLI_SSL_VERIFY=n
#   - anchore-cli image list
#   - anchore-cli image add alpine
#   - anchore-cli image get alpine
#   - ...
#
# - stop: docker-compose down --volumes
#
# Notes:
# - to start up again, run the same docker-compose up -d as above
# - to reset the DB, stop anchore engine with docker-compose down --volumes as above, then remove all files/directories in /root/aevolume/db/*, and restart
# - if you enable SSL for any services, make sure to do so across the board in your config.yaml, and change the ANCHORE_CLI_URL to use https instead of http
# - if you change the admin password in config.yaml, make sure to update your ANCHORE_CLI_PASS export as well
# - if you change the DB password in this file, make sure to also change it in your config.yaml 'db_connect' setting
# 

version: '2'
services:
  anchore-engine:
    #image: "anchore-engine"
    image: neptune:5001/timw/anchore/anchore-engine:latest
    #privileged: true
    depends_on:
     - anchore-db
    ports:
     - "8228:8228"
     - "8338:8338"
    volumes:
     - anchore-config:/config/:Z
     - /var/run/docker.sock:/var/run/docker.sock
    logging:
     driver: "json-file"
     options:
      max-size: 100m
  anchore-db:
    image: "postgres:latest"
    volumes:
     - anchore-data:/var/lib/postgresql/data/pgdata/:Z
    environment:
      - POSTGRES_PASSWORD=mysecretpassword
      - PGDATA=/var/lib/postgresql/data/pgdata/
    logging:
     driver: "json-file"
     options:
      max-size: 100m
    labels:
      io.rancher.container.pull_image: always
      io.rancher.scheduler.affinity:host_label: hostname=${host_name}

volumes:
  anchore-config:
    driver: rancher-nfs
    external: true
  anchore-data:
    driver: rancher-nfs
    external: true